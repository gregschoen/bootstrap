#!/bin/bash

set -e

PATH="/usr/local/bin:$PATH"

RESTORE=$(echo -en '\033[0m')
RED=$(echo -en '\033[00;31m')
GREEN=$(echo -en '\033[00;32m')
YELLOW=$(echo -en '\033[00;33m')

silently() { $* >/dev/null 2>&1; }
ignore_error() { $* || echo -n; }
send_green() { echo "----> ${GREEN}${1}${RESTORE}"; }
send_yellow() { echo "----> ${YELLOW}${1}${RESTORE}"; }
send_red() { echo "----> ${RED}${1}${RESTORE}"; }

send_red "gregschoen/bootstrap v0.1.1"

################################# Preferences ################################
if [[ -z $(sudo grep "$USER.*NOPASSWD" /etc/sudoers) ]]; then
	send_red "(System) Disable password for sudo"
	echo "$USER ALL=(ALL) NOPASSWD: ALL" | sudo tee -a /etc/sudoers > /dev/null
fi

if [[ -z $(defaults read NSGlobalDomain com.apple.swipescrolldirection | grep 0) ]]; then
	send_green "(System) Natural Scrolling: Off"
	defaults write NSGlobalDomain com.apple.swipescrolldirection -bool false
fi

if [[ -z $(sudo defaults read /Library/Preferences/com.apple.alf globalstate | grep 1) ]]; then
	send_green "(System) Firewall: On"
	sudo defaults write /Library/Preferences/com.apple.alf globalstate -int 1
fi

if [[ -z $(sudo systemsetup -getremotelogin | grep "Remote Login: On") ]]; then
	send_green "(System) Remote Login: On"
	sudo systemsetup -setremotelogin on
fi

if [[ -z $(sudo systemsetup -getrestartfreeze | grep "Restart After Freeze: On") ]]; then
	send_green "(System) Restart After Freeze: On"
	sudo systemsetup -setrestartfreeze on
fi

if [[ -z $(defaults read /Library/Preferences/com.apple.loginwindow SHOWFULLNAME | grep 1) ]]; then
	send_green "(LoginWindow) Show Full Name: On"
	sudo defaults write /Library/Preferences/com.apple.loginwindow SHOWFULLNAME -bool true
fi

if [[ -z $(defaults read com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking | grep 1) ]]; then
	send_green "(System) Trackpad Tap to Click: On"
	defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
fi

if [[ -z $(defaults read NSGlobalDomain com.apple.mouse.tapBehavior | grep 1) ]]; then
	send_green "(System) Mouse Tap to Click: On"
	defaults write NSGlobalDomain com.apple.mouse.tapBehavior -integer 1
fi

if [[ -z $(defaults read NSGlobalDomain NSNavPanelExpandedStateForSaveMode | grep 1) ]]; then
	send_green "(System) Expand Save Panel: On"
	defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
fi

if [[ -z $(defaults read NSGlobalDomain NSDocumentSaveNewDocumentsToCloud | grep 0) ]]; then
	send_green "(System) Save New Documents To Cloud: Off"
	defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false
fi

if [[ -z $(defaults read /Library/Preferences/com.apple.loginwindow GuestEnabled | grep 0) ]]; then
	send_green "(LoginWindow) Guest Enabled: Off"
	sudo defaults write /Library/Preferences/com.apple.loginwindow GuestEnabled -bool false
fi

if [[ -z $(defaults read com.apple.finder FXPreferredViewStyle | grep clmv) ]]; then
	send_green "(Finder) Preferred View Style: Column View"
	defaults write com.apple.finder FXPreferredViewStyle -string "clmv"; KILL_FINDER=true
fi

if [[ -z $(defaults read com.apple.finder WarnOnEmptyTrash | grep 0) ]]; then
	send_green "(Finder) Empty Trash Without Prompt: On"
	defaults write com.apple.finder WarnOnEmptyTrash -bool false; KILL_FINDER=true
fi

if [[ -z $(defaults read com.apple.finder EmptyTrashSecurely | grep 1) ]]; then
	send_green "(Finder) Empty Trash Securely: On"
	defaults write com.apple.finder EmptyTrashSecurely -bool true; KILL_FINDER=true
fi

if [[ -z $(defaults read com.apple.finder AppleShowAllFiles | grep 1) ]]; then
	send_green "(Finder) AppleShowAllFiles: On"
	defaults write com.apple.finder AppleShowAllFiles -bool true; KILL_FINDER=true
fi

if [[ -z $(defaults read com.apple.finder AppleShowAllExtensions | grep 1) ]]; then
	send_green "(Finder) AppleShowAllExtensions: On"
	defaults write com.apple.finder AppleShowAllExtensions -bool true; KILL_FINDER=true
fi

if [[ -z $(defaults read com.apple.finder ShowHardDrivesOnDesktop | grep 1) ]]; then
	send_green "(Finder) ShowHardDrivesOnDesktop: On"
	defaults write com.apple.finder ShowHardDrivesOnDesktop -bool true; KILL_FINDER=true
fi

if [[ -z $(defaults read com.apple.desktopservices DSDontWriteNetworkStores | grep 1) ]]; then
	send_green "(DesktopServices) DSDontWriteNetworkStores: On"
	defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true
fi

if [[ -z $(defaults read com.apple.frameworks.diskimages skip-verify | grep 1) ]]; then
	send_green "(DiskImages) Skip Verify: On"
	defaults write com.apple.frameworks.diskimages skip-verify -bool true
fi

if [[ -z $(defaults read com.apple.frameworks.diskimages skip-verify-locked | grep 1) ]]; then
	send_green "(DiskImages) Skip Verify Locked: On"
	defaults write com.apple.frameworks.diskimages skip-verify-locked -bool true
fi

if [[ -z $(defaults read com.apple.frameworks.diskimages skip-verify-remote | grep 1) ]]; then
	send_green "(DiskImages) Skip Verify Remote: On"
	defaults write com.apple.frameworks.diskimages skip-verify-remote -bool true
fi

if [[ -z $(defaults read com.apple.dock autohide | grep -E ^1$) ]]; then
	send_green "(Dock) Autohide: On"
	defaults write com.apple.dock autohide -bool true; KILL_DOCK=true
fi

if [[ -z $(defaults read com.apple.dock wvous-bl-corner | grep -E ^10$) ]]; then
	send_green "(Dock) Bottom Left Hot Corner: Sleep Display"
	defaults write com.apple.dock wvous-bl-corner -integer 10; KILL_DOCK=true
fi

if [[ -z $(defaults read com.apple.dock wvous-br-corner | grep -E ^10$) ]]; then
	send_green "(Dock) Bottom Right Hot Corner: Sleep Display"
	defaults write com.apple.dock wvous-br-corner -integer 10; KILL_DOCK=true
fi

if [[ -z $(defaults read com.apple.dock tilesize | grep -E ^36$) ]]; then
	send_green "(Dock) Tilesize: 36px"
	defaults write com.apple.dock tilesize -integer 36; KILL_DOCK=true
fi

if [[ -z $(defaults read com.apple.dock magnification | grep -E ^1$) ]]; then
	send_green "(Dock) Magnification: On"
	defaults write com.apple.dock magnification -bool true; KILL_DOCK=true
fi

if [[ -z $(defaults read com.apple.dock largesize | grep -E ^64$) ]]; then
	send_green "(Dock) Magnified Tilesize: 64px"
	defaults write com.apple.dock largesize -integer 64; KILL_DOCK=true
fi

if [[ -z $(defaults read com.apple.dock mru-spaces | grep 0) ]]; then
	send_green "(Dock) Most Recently Used Spaces: Off"
	defaults write com.apple.dock mru-spaces -bool false; KILL_DOCK=true
fi

if [[ -z $(defaults read com.apple.screensaver askForPasswordDelay | grep -E ^5$) ]]; then
	send_green "(Screensaver) AskForPasswordDelay: 5s"
	defaults write com.apple.screensaver askForPasswordDelay -integer 5
fi

if [[ -z $(defaults read com.Apple.Terminal "Default Window Settings" | grep -E ^Pro$) ]]; then
	send_green "(Terminal) Default Theme: Pro"
	defaults write com.Apple.Terminal "Default Window Settings" -string "Pro"
fi

if [[ -z $(defaults read com.Apple.Terminal "Startup Window Settings" | grep -E ^Pro$) ]]; then
	send_green "(Terminal) Startup Theme: Pro"
	defaults write com.Apple.Terminal "Startup Window Settings" -string "Pro"
fi

if [[ -z $(defaults read com.apple.screencapture name | grep -E ^Screenshot$) ]]; then
	send_green "(ScreenCapture) Default Screenshot Save Name: Screenshot"
	defaults write com.apple.screencapture name "Screenshot"
fi

if [[ -z $(defaults read com.apple.screencapture location | grep -E Dropbox/Screenshots/$) ]]; then
	if [[ -d ~/Dropbox/Screenshots/ ]]; then
		send_green "(ScreenCapture) Default Screenshot Save Location: ~/Dropbox/Screenshots"
		defaults write com.apple.screencapture location ~/Dropbox/Screenshots/; KILL_SYSTEMUISERVER=true
	else
		send_red "Dropbox is not currently available, rerun when Dropbox is synced!"
	fi
fi

if [[ -z $(defaults read com.apple.menuextra.battery ShowPercent | grep 1) ]]; then
	send_green "(Menu) Display Battery Percentage: On"
	defaults write com.apple.menuextra.battery ShowPercent -bool true; KILL_SYSTEMUISERVER=true
fi

if [[ -z $(defaults read com.apple.menuextra.clock DateFormat | grep -E "^EEE MMM d  H:mm$") ]]; then
	send_green "(Menu) Clock Date Format: EEE MMM d  H:mm"
	defaults write com.apple.menuextra.clock DateFormat -string "EEE MMM d  H:mm"; KILL_SYSTEMUISERVER=true
fi

if [[ -z $(defaults read com.apple.menuextra.clock FlashDateSeparators | grep 0) ]]; then
	send_green "(Menu) Clock Flash Date Separator: Off"
	defaults write com.apple.menuextra.clock FlashDateSeparators -bool false; KILL_SYSTEMUISERVER=true
fi

if [[ -z $(defaults read com.apple.menuextra.clock IsAnalog | grep 0) ]]; then
	send_green "(Menu) Clock Is Analog: Off"
	defaults write com.apple.menuextra.clock IsAnalog -bool false; KILL_SYSTEMUISERVER=true
fi

if [[ -z $(defaults read com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadCornerSecondaryClick | grep 2) ]]; then
	send_green "(Trackpad) Corner Secondary Click: 2"
	defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadCornerSecondaryClick -int 2
fi

if [[ -z $(defaults read com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadRightClick | grep 1) ]]; then
	send_green "(Trackpad) Right Click: On"
	defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadRightClick -bool true
fi

if [[ -z $(defaults -currentHost read NSGlobalDomain com.apple.trackpad.trackpadCornerClickBehavior | grep 1) ]]; then
	send_green "(Trackpad) Corner Click Behavior: 1"
	defaults -currentHost write NSGlobalDomain com.apple.trackpad.trackpadCornerClickBehavior -int 1
fi

if [[ -z $(defaults -currentHost read NSGlobalDomain com.apple.trackpad.enableSecondaryClick | grep 1) ]]; then
	send_green "(Trackpad) Enable Secondary Click: On"
	defaults -currentHost write NSGlobalDomain com.apple.trackpad.enableSecondaryClick -bool true
fi

if [[ -z $(/usr/libexec/PlistBuddy -c "Print :DesktopViewSettings:IconViewSettings:arrangeBy" ~/Library/Preferences/com.apple.finder.plist | grep name) ]]; then
	send_green "(Finder) Desktop Arrange By: Name"
	/usr/libexec/PlistBuddy -c "Set :DesktopViewSettings:IconViewSettings:arrangeBy name" ~/Library/Preferences/com.apple.finder.plist; KILL_FINDER=true
fi

if [[ -z $(/usr/libexec/PlistBuddy -c "Print :DesktopViewSettings:IconViewSettings:iconSize" ~/Library/Preferences/com.apple.finder.plist | egrep ^32) ]]; then
	send_green "(Finder) Icon Size: 32"
	/usr/libexec/PlistBuddy -c "Set :DesktopViewSettings:IconViewSettings:iconSize 32" ~/Library/Preferences/com.apple.finder.plist; KILL_FINDER=true
fi

if [[ -z $(/usr/libexec/PlistBuddy -c "Print :DesktopViewSettings:IconViewSettings:textSize" ~/Library/Preferences/com.apple.finder.plist | egrep ^10) ]]; then
	send_green "(Finder) Text Size: 10"
	/usr/libexec/PlistBuddy -c "Set :DesktopViewSettings:IconViewSettings:textSize 10" ~/Library/Preferences/com.apple.finder.plist; KILL_FINDER=true
fi


if [[ $KILL_FINDER ]]; then 
	send_yellow "Killing Finder"; killall Finder; 
fi
if [[ $KILL_DOCK ]]; then 
	send_yellow "Killing Dock"; killall Dock; 
fi
if [[ $KILL_SYSTEMUISERVER ]]; then 
	send_yellow "Killing SystemUIServer"; killall SystemUIServer;
fi

if ! [[ -x /Library/Developer/CommandLineTools ]]; then
	send_green 'Installing Command Line Tools...'
	xcode-select --install
	read -p "Press any key to continue... " -n1 -s
fi

# multi-user and homebrew gets weird
send_green "Repairing file permissions..."
paths=(
	"/usr/local"
# 	"/Library/Caches/Homebrew"
	"/opt/homebrew-cask"
)

# # -f to ignore errors due to missing subdirectories at this point
sudo chgrp -f -R admin ${paths[@]}
sudo chmod -f -R g+w ${paths[@]}

if [ ! -x /usr/local/bin/brew ]; then
	send_yellow "Installing Homebrew..."
	ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
else
	send_green "Updating Homebrew..."
	brew update
	brew upgrade
fi

taps=(
	homebrew/dupes
	caskroom/fonts
)
send_green "Installing ${#taps[@]} Taps..."

for i in ${taps[@]}; do
	echo -n "$i "
	[[ ! -z $(brew tap | grep -E "^${i}$") ]] || brew tap $i;
done
echo ""

################################# Brews ################################
brews=(
	ack
	ccze
	colordiff
	exiftool
	# ffmpeg
	"ffmpeg --with-libvpx --with-libvorbis --with-fdk-aacc"
	giflossy
	git
	git-extras
	homebrew/fuse/ntfs-3g
	htop-osx
	imagemagick
	logstalgia
	mackup
	mkvtoolnix
	nodejs
	pandoc
	pngquant
	rename
	tvnamer
	youtube-dl
)
send_green "Installing ${#brews[@]} Brews..."

for i in ${brews[@]}; do
	echo -n "$i "
	[[ -n $(brew ls --versions $i) ]] || brew install $i
done
echo ""

################################# Casks ################################
casks=(
	bitbar
	dropbox
	expandrive
	firefox
	flux
	font-inconsolata
	font-ubuntu
	handbrake
	hex-fiend
	ipvanish-vpn
	istumbler
	java
	keyboard-cleaner
	macdown
	minecraft
	openoffice
	playonmac
	processing
	puppet
	slack
	smcfancontrol
	spotify
	sublime-text
	steam
	the-unarchiver
	torbrowser
	transmission
	vagrant
	virtualbox
	virtualbox-extension-pack
	vlc
)
send_green "Installing ${#casks[@]} Casks... "

for i in ${casks[@]}; do
	echo -n "$i "
	(silently brew cask ls --appdir=/Applications --fontdir=/Library/Fonts $i) || sudo brew cask install --force --appdir=/Applications --fontdir=/Library/Fonts $i;
done
echo ""

################################# Gems ################################
gems=(
	jekyll
	jekyll-assets
	jekyll-sitemap
	jekyll-paginate
	uglifier
	s3_website
)
send_green "Installing ${#gems[@]} Gems..."

for i in ${gems[@]}; do
	echo -n "$i "
	[[ -n $(sudo gem list | grep "$i ") ]] || sudo gem install $i
done;
echo ""

send_yellow "All done. Enjoy your shiny new computer!"
